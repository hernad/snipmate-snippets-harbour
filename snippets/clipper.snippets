# harbour
snippet for
	for _i := 1 to ${1:cnt}
	   ${2:// code}
	next
snippet while
	do while ${1:condition}
	   ${2:// code}
	enddo
snippet trycatch
	begin sequence with { |err| err:cargo := { ProcName(1), ProcName(2), ProcLine(1), ProcLine(2) }, Break(err) }
	    ${1:// code}
	recover using _err

	    _msg := "ERR: " + _err:description + "${2:opis greske}"
	    ${3:ALERT(_msg)}
	    log_write(_msg, ${4:loglevel})

	    ${5://RaiseError(_msg)}
	    ${6://QUIT_1}

	end sequence
snippet case
	do case	
	    case (${1:_char==K_ENTER})
	        ${2://code if char K_ENTER}
		case (${3:_char==K_ESC})
	        ${4://code if char K_ESC}
	    otherwise
	        ${5://otherwise code}
	end case
snippet inc_hbclass
	#include "hbclass.ch"
snippet class_create
	CLASS ${1:Class}  INHERIT  ${2:Parent1}, ${3:Parrent2}

	    DATA       ${4:Data1}  INIT ${5:InitData1}
	    CLASSDATA  ${6:class_private_data}

	    METHOD     New(${7:params})
	    METHOD     Destroy()
	    METHOD     ${8:method}(${9:m_params})
	    METHOD     ${10:inline_method}(${11:inline_params})   INLINE ${12:{|| return .t.}}

	  PROTECTED:
	    METHOD     ${13:protected_method}(${14:protected_method_params})
	ENDCLASS
snippet class_new_method
	METHOD ${1:Class}:New(${2:method_params})
		${4://new code}
	return SELF
snippet class_method
	METHOD ${1:Class}:${2:method_name}(${3:method_params})
		${4://code}
	return ${3:retval}
snippet class_access_method
	ACCESS ${1:access_assign_name}   INLINE ::${2:instance_var}
snippet class_assign_method
	ASSIGN ${1:access_assign_name}(${2:value})   INLINE ::${3:instance_var} := ${2:value}
snippet class_self
	SELF
snippet class_this
	SELF
snippet class_instance
	::${1:instance_var}
snippet isnum
	hb_isNumeric(${1:var})
